generator client {
  provider = "prisma-client-js"
  output   = "../src/config/db/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String        @id @default(uuid())
  username String        @unique
  password String 
  bot      Bot[]
  feedback Feedback[]
  teams    TeamMember[]  // Users can belong to teams
  teamsOwned Team[] @relation("UserOwnedTeams")

  profileImg String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
   owner     User     @relation("UserOwnedTeams", fields: [ownerId], references: [id])
  members   TeamMember[]
  bots      Bot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id      String @id @default(uuid())
  teamId  String
  userId  String
  role    TeamMemberRole

  team    Team   @relation(fields: [teamId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Bot {
  id        String @id @default(uuid())
  token     String @unique
  name      String
  username  String
  userId    String? 
  teamId    String? 

  logicFlow Json?

  user      User?   @relation(fields: [userId], references: [id])
  team      Team?   @relation(fields: [teamId], references: [id])

  subscribers Subscriber[]
  broadcasts  Broadcast[]

  createdAt DateTime @default(now())
}

model Subscriber {
  id         String   @id @default(uuid())
  chatId     String   
  username   String?  
  firstName  String?
  lastName   String?
  botId      String
  bot        Bot      @relation(fields: [botId], references: [id])

  createdAt  DateTime @default(now())
}

model Broadcast {
  id          String   @id @default(uuid())
  message     String
  botId       String
  bot         Bot      @relation(fields: [botId], references: [id])
  successCount Int     @default(0)
  
  createdAt   DateTime @default(now())
}

model Feedback {
  id        String   @id @default(uuid())
  message   String
  email     String?
  userId    String? 
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}



enum TeamMemberRole {
  OWNER
  ADMIN
  MEMBER
}