// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/config/db/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(uuid())
  username String     @unique
  password String
  bot      Bot[]
  feedback Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bot {
  id       String @id @default(uuid())
  token    String @unique
  name     String
  username String
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  subscribers Subscriber[]
  broadcasts  Broadcast[]

  createdAt DateTime @default(now())
}

model Subscriber {
  id        String  @id @default(uuid())
  chatId    String // Telegram unique chat ID for user
  username  String? // May be null if user has no username
  firstName String?
  lastName  String?
  botId     String
  bot       Bot     @relation(fields: [botId], references: [id])

  createdAt DateTime @default(now())
}

model Broadcast {
  id           String @id @default(uuid())
  message      String
  botId        String
  bot          Bot    @relation(fields: [botId], references: [id])
  successCount Int    @default(0)

  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @id @default(uuid())
  message   String
  email     String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
